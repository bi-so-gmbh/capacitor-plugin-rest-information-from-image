{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface RestInformationPlugin {\n  scan(scanCall: IScanCall): Promise<object>;\n}\n\n/**\n * All settings that can be passed to the plugin.\n */\nexport interface ISettings {\n  /** when true the device will beep on image capture */\n  beepOnSuccess?: boolean;\n  /** when true the device will vibrate on image capture */\n  vibrateOnSuccess?: boolean;\n  /** between '0' and '1', determines the percentage of the screen will be covered */\n  detectorSize?: number;\n  /** aspect ratio of the detector in format 2:1 */\n  detectorAspectRatio?: string;\n  /** when true the detection area will be outlined */\n  drawFocusRect?: boolean;\n  /** color of the detection area outline as hex code (supports alpha) */\n  focusRectColor?: string;\n  /** corner radius of the detection area */\n  focusRectBorderRadius?: number;\n  /** border thickness of the detection area outline */\n  focusRectBorderThickness?: number;\n  /** when true a line will mark the center of the detection area */\n  drawFocusLine?: boolean;\n  /** color of the focus line as hex code (supports alpha) */\n  focusLineColor?: string;\n  /** thickness of the focus line */\n  focusLineThickness?: number;\n  /** when true the area outside the detector will be filled */\n  drawFocusBackground?: boolean;\n  /** color to fill the background with as hex code (supports alpha) */\n  focusBackgroundColor?: string;\n  /** the color of the loading spinner as hex (supports alpha) */\n  loadingCircleColor?: string;\n  /** the size of the loading spinner */\n  loadingCircleSize?: number;\n  /** image width in px, if width and height are not valid, closest valid size will be used */\n  imageWidth?: number;\n  /** image height in px, if width and height are not valid, closest valid size will be used */\n  imageHeight?: number;\n  /** image compression, value between '0' and '1', '1' is uncompressed */\n  imageCompression?: number;\n  /** when true the image will be saved to the device */\n  saveImage?: boolean;\n  /** prefix of the image name, will be extended with the current date and time */\n  imageName?: string;\n  /** the folder inside Documents to save the image to on android, on iOS it defaults to the app name and can't be changed */\n  androidImageLocation?: string;\n}\n\n/**\n * Data used for the http request. Url, headers and body are required, though both header\n * and body can be an empty object. base64Key and imageTypeKey configure how the image and the\n * image type will be named when they are added to the body.\n */\nexport interface IRequest {\n  /** the url the image will be posted to */\n  url: string;\n  /** the headers to include, can be an empty object */\n  headers: Record<string, string>;\n  /** the body to include, can be an empty object */\n  body: Record<string, any>;\n  /** the key under which the base64 data of the image will be sent */\n  base64Key?: string;\n  /** the key under which the image filetype will be sent */\n  imageTypeKey?: string;\n}\n\n/**\n * The configuration object for the plugin. IRequest is mandatory because it configures needed\n * things like the url, settings can be left empty, which will use the default settings.\n */\nexport interface IScanCall {\n  /** request configuration */\n  request: IRequest;\n  /** scanner settings, can be left empty which will use default settings */\n  settings?: ISettings;\n}\n"]}