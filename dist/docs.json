{
  "api": {
    "name": "RestInformationPlugin",
    "slug": "restinformationplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "scan",
        "signature": "(scanCall: IScanCall) => Promise<Object>",
        "parameters": [
          {
            "name": "scanCall",
            "docs": "",
            "type": "IScanCall"
          }
        ],
        "returns": "Promise<Object>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "Object",
          "IScanCall"
        ],
        "slug": "scan"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "Object",
      "slug": "object",
      "docs": "Provides functionality common to all JavaScript objects.",
      "tags": [],
      "methods": [
        {
          "name": "toString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a string representation of an object.",
          "complexTypes": [],
          "slug": "tostring"
        },
        {
          "name": "toLocaleString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a date converted to a string using the current locale.",
          "complexTypes": [],
          "slug": "tolocalestring"
        },
        {
          "name": "valueOf",
          "signature": "() => Object",
          "parameters": [],
          "returns": "Object",
          "tags": [],
          "docs": "Returns the primitive value of the specified object.",
          "complexTypes": [
            "Object"
          ],
          "slug": "valueof"
        },
        {
          "name": "hasOwnProperty",
          "signature": "(v: PropertyKey) => boolean",
          "parameters": [
            {
              "name": "v",
              "docs": "A property name.",
              "type": "PropertyKey"
            }
          ],
          "returns": "boolean",
          "tags": [
            {
              "name": "param",
              "text": "v A property name."
            }
          ],
          "docs": "Determines whether an object has a property with the specified name.",
          "complexTypes": [
            "PropertyKey"
          ],
          "slug": "hasownproperty"
        },
        {
          "name": "isPrototypeOf",
          "signature": "(v: Object) => boolean",
          "parameters": [
            {
              "name": "v",
              "docs": "Another object whose prototype chain is to be checked.",
              "type": "Object"
            }
          ],
          "returns": "boolean",
          "tags": [
            {
              "name": "param",
              "text": "v Another object whose prototype chain is to be checked."
            }
          ],
          "docs": "Determines whether an object exists in another object's prototype chain.",
          "complexTypes": [
            "Object"
          ],
          "slug": "isprototypeof"
        },
        {
          "name": "propertyIsEnumerable",
          "signature": "(v: PropertyKey) => boolean",
          "parameters": [
            {
              "name": "v",
              "docs": "A property name.",
              "type": "PropertyKey"
            }
          ],
          "returns": "boolean",
          "tags": [
            {
              "name": "param",
              "text": "v A property name."
            }
          ],
          "docs": "Determines whether a specified property is enumerable.",
          "complexTypes": [
            "PropertyKey"
          ],
          "slug": "propertyisenumerable"
        }
      ],
      "properties": [
        {
          "name": "constructor",
          "tags": [],
          "docs": "The initial value of Object.prototype.constructor is the standard built-in Object constructor.",
          "complexTypes": [
            "Function"
          ],
          "type": "Function"
        }
      ]
    },
    {
      "name": "Function",
      "slug": "function",
      "docs": "Creates a new function.",
      "tags": [],
      "methods": [
        {
          "name": "apply",
          "signature": "(this: Function, thisArg: any, argArray?: any) => any",
          "parameters": [
            {
              "name": "thisArg",
              "docs": "The object to be used as the this object.",
              "type": "any"
            },
            {
              "name": "argArray",
              "docs": "A set of arguments to be passed to the function.",
              "type": "any"
            }
          ],
          "returns": "any",
          "tags": [
            {
              "name": "param",
              "text": "thisArg The object to be used as the this object."
            },
            {
              "name": "param",
              "text": "argArray A set of arguments to be passed to the function."
            }
          ],
          "docs": "Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.",
          "complexTypes": [
            "Function"
          ],
          "slug": "apply"
        },
        {
          "name": "call",
          "signature": "(this: Function, thisArg: any, ...argArray: any[]) => any",
          "parameters": [
            {
              "name": "thisArg",
              "docs": "The object to be used as the current object.",
              "type": "any"
            },
            {
              "name": "argArray",
              "docs": "A list of arguments to be passed to the method.",
              "type": "any[]"
            }
          ],
          "returns": "any",
          "tags": [
            {
              "name": "param",
              "text": "thisArg The object to be used as the current object."
            },
            {
              "name": "param",
              "text": "argArray A list of arguments to be passed to the method."
            }
          ],
          "docs": "Calls a method of an object, substituting another object for the current object.",
          "complexTypes": [
            "Function"
          ],
          "slug": "call"
        },
        {
          "name": "bind",
          "signature": "(this: Function, thisArg: any, ...argArray: any[]) => any",
          "parameters": [
            {
              "name": "thisArg",
              "docs": "An object to which the this keyword can refer inside the new function.",
              "type": "any"
            },
            {
              "name": "argArray",
              "docs": "A list of arguments to be passed to the new function.",
              "type": "any[]"
            }
          ],
          "returns": "any",
          "tags": [
            {
              "name": "param",
              "text": "thisArg An object to which the this keyword can refer inside the new function."
            },
            {
              "name": "param",
              "text": "argArray A list of arguments to be passed to the new function."
            }
          ],
          "docs": "For a given function, creates a bound function that has the same body as the original function.\r\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.",
          "complexTypes": [
            "Function"
          ],
          "slug": "bind"
        },
        {
          "name": "toString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a string representation of a function.",
          "complexTypes": [],
          "slug": "tostring"
        }
      ],
      "properties": [
        {
          "name": "prototype",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "any"
        },
        {
          "name": "length",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "arguments",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "any"
        },
        {
          "name": "caller",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "Function"
          ],
          "type": "Function"
        }
      ]
    },
    {
      "name": "IScanCall",
      "slug": "iscancall",
      "docs": "The configuration object for the plugin. IRequest is mandatory because it configures needed\nthings like the url, settings can be left empty, which will use the default settings.",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "request",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "IRequest"
          ],
          "type": "IRequest"
        },
        {
          "name": "settings",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "ISettings"
          ],
          "type": "ISettings"
        }
      ]
    },
    {
      "name": "IRequest",
      "slug": "irequest",
      "docs": "Data used for the http request. Url, headers and body are required, though both header\nand body can be an empty object. base64Key and imageTypeKey configure how the image and the\nimage type will be named when they are added to the body.",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "url",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "headers",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "Record"
          ],
          "type": "Record<string, string>"
        },
        {
          "name": "body",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "Record"
          ],
          "type": "Record<string, any>"
        },
        {
          "name": "base64Key",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "imageTypeKey",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "ISettings",
      "slug": "isettings",
      "docs": "All settings that can be passed to the plugin. The `detectorSize` value must be between\n`0` and `1`, because it determines how many percent of the screen should be covered by\nthe detector.\nIf the value is greater than 1 the detector will not be visible on the screen.",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "beepOnSuccess",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "vibrateOnSuccess",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "detectorSize",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "detectorAspectRatio",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "drawFocusRect",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "focusRectColor",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "focusRectBorderRadius",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "focusRectBorderThickness",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "drawFocusLine",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "focusLineColor",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "focusLineThickness",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "drawFocusBackground",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "focusBackgroundColor",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "loadingCircleColor",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "loadingCircleSize",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "imageWidth",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "imageHeight",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [
    {
      "name": "PropertyKey",
      "slug": "propertykey",
      "docs": "",
      "types": [
        {
          "text": "string",
          "complexTypes": []
        },
        {
          "text": "number",
          "complexTypes": []
        },
        {
          "text": "symbol",
          "complexTypes": []
        }
      ]
    },
    {
      "name": "Record",
      "slug": "record",
      "docs": "Construct a type with a set of properties K of type T",
      "types": [
        {
          "text": "{\r\n    [P in K]: T;\r\n}",
          "complexTypes": [
            "K",
            "T"
          ]
        }
      ]
    }
  ],
  "pluginConfigs": []
}